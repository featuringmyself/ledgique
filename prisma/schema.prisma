// This is your enhanced Prisma schema file
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ClientStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum ProjectStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  ON_HOLD
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  clerkId   String   @unique
  name      String
  role      String   @default("USER")
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  projects Project[]
  clients  Client[]
  tasks    Task[]

  @@map("users")
}

model Client {
  id        String       @id @default(uuid())
  email     String[]     @default([])
  phone     String[]     @default([])
  name      String
  company   String?
  address   String?
  website   String?
  notes     String?
  status    ClientStatus @default(ACTIVE)
  userId    String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // Relations
  projects Project[]
  payments Payment[]
  user     User?     @relation(fields: [userId], references: [id])

  @@map("clients")
}

model Project {
  id           String        @id @default(uuid())
  name         String
  description  String?
  clientId     String // Fixed: Changed from Int to String
  userId       String
  deliverables String[]      @default([])
  status       ProjectStatus @default(PENDING)
  priority     Priority      @default(MEDIUM)
  startDate    DateTime?
  endDate      DateTime?
  budget       Decimal?      @db.Money
  actualCost   Decimal?      @db.Money
  tags         String[]      @default([])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // Relations
  client  Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user    User?     @relation(fields: [userId], references: [id])
  tasks   Task[]
  Payment Payment[]

  @@map("projects")
}

model Task {
  id             String        @id @default(uuid())
  title          String
  description    String?
  projectId      String // Fixed: Changed from Int to String
  userId         String?
  status         ProjectStatus @default(PENDING)
  priority       Priority      @default(MEDIUM)
  dueDate        DateTime?
  completed      Boolean       @default(false)
  estimatedHours Int?
  actualHours    Int?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User?   @relation(fields: [userId], references: [id])

  @@map("tasks")
}

enum PaymentType {
  ADVANCE
  MILESTONE
  FINAL
  FULL_PAYMENT
  PARTIAL
  REFUND
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  STRIPE
  RAZORPAY
  UPI
  CHEQUE
  CRYPTO
  OTHER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
  PARTIALLY_PAID
}

model Payment {
  id          String        @id @default(uuid())
  amount      Decimal       @db.Money
  date        DateTime
  dueDate     DateTime?
  description String?
  type        PaymentType   @default(PARTIAL)
  method      PaymentMethod @default(BANK_TRANSFER)
  status      PaymentStatus @default(PENDING)

  // Milestone tracking
  milestoneTitle String?
  milestoneOrder Int?

  // Payment breakdown
  taxAmount      Decimal? @db.Money
  discountAmount Decimal? @db.Money
  netAmount      Decimal? @db.Money

  // External references
  transactionId String? @unique
  invoiceNumber String?
  receiptUrl    String?

  // Relations
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  clientId  String
  client    Client  @relation(fields: [clientId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payments")
}
