// This is your enhanced Prisma schema file
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ClientStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum ProjectStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  ON_HOLD
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model User {
  id       String @id @default(cuid())
  clerkId  String @unique
  currency String
}

model ClientSource {
  id        String   @id @default(uuid())
  name      String
  clerkId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  clients Client[]

  @@unique([name, clerkId])
  @@map("client_sources")
}

model Client {
  id             String       @id @default(uuid())
  email          String[]     @default([])
  phone          String[]     @default([])
  name           String
  company        String?
  address        String?
  website        String?
  clientNotes    String?
  clientSourceId String?
  status         ClientStatus @default(ACTIVE)
  clerkId        String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // Relations
  clientSource ClientSource? @relation(fields: [clientSourceId], references: [id], onDelete: SetNull)
  projects     Project[]
  payments     Payment[]
  invoices     Invoice[]
  retainers    Retainer[]
  expenses     Expense[]
  notes        Note[]

  @@map("clients")
}

model Project {
  id           String        @id @default(uuid())
  name         String
  description  String?
  clientId     String // Fixed: Changed from Int to String
  clerkId      String
  deliverables String[]      @default([])
  status       ProjectStatus @default(PENDING)
  priority     Priority      @default(MEDIUM)
  startDate    DateTime?
  endDate      DateTime?
  budget       Decimal?      @db.Money
  actualCost   Decimal?      @db.Money
  tags         String[]      @default([])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // Relations
  client    Client     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  tasks     Task[]
  payments  Payment[]
  invoices  Invoice[]
  retainers Retainer[]
  expenses  Expense[]
  notes     Note[]

  @@map("projects")
}

model Task {
  id             String        @id @default(uuid())
  title          String
  description    String?
  projectId      String // Fixed: Changed from Int to String
  clerkId        String?
  status         ProjectStatus @default(PENDING)
  priority       Priority      @default(MEDIUM)
  dueDate        DateTime?
  completed      Boolean       @default(false)
  estimatedHours Int?
  actualHours    Int?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

enum PaymentType {
  ADVANCE
  MILESTONE
  FINAL
  FULL_PAYMENT
  PARTIAL
  REFUND
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  STRIPE
  RAZORPAY
  UPI
  CHEQUE
  CRYPTO
  OTHER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
  PARTIALLY_PAID
}

enum InvoiceStatus {
  DRAFT
  SENT
  VIEWED
  PAID
  OVERDUE
  CANCELLED
}

enum RetainerStatus {
  ACTIVE
  DEPLETED
  EXPIRED
  CANCELLED
}

model Payment {
  id          String        @id @default(uuid())
  amount      Decimal       @db.Money
  date        DateTime
  dueDate     DateTime?
  description String?
  type        PaymentType   @default(PARTIAL)
  method      PaymentMethod @default(BANK_TRANSFER)
  status      PaymentStatus @default(PENDING)

  // Milestone tracking
  milestoneTitle String?
  milestoneOrder Int?

  // Payment breakdown
  taxAmount      Decimal? @db.Money
  discountAmount Decimal? @db.Money
  netAmount      Decimal? @db.Money

  // External references
  transactionId String? @unique
  invoiceNumber String?
  receiptUrl    String?

  // Relations
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  clientId  String
  client    Client  @relation(fields: [clientId], references: [id], onDelete: Cascade)

  // Invoice relation (optional)
  invoiceId String?
  invoice   Invoice? @relation("InvoicePayments", fields: [invoiceId], references: [id], onDelete: SetNull)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payments")
}

model Invoice {
  id            String        @id @default(uuid())
  invoiceNumber String        @unique
  title         String
  description   String?
  issueDate     DateTime      @default(now())
  dueDate       DateTime
  status        InvoiceStatus @default(DRAFT)

  // Financial details
  subtotal       Decimal  @db.Money
  taxRate        Decimal? @default(0)
  taxAmount      Decimal? @db.Money
  discountAmount Decimal? @db.Money
  totalAmount    Decimal  @db.Money

  // Invoice items
  items InvoiceItem[]

  // Relations
  clientId  String
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)

  // Payment tracking
  payments Payment[] @relation("InvoicePayments")

  // Notes and terms
  notes String?
  terms String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("invoices")
}

model InvoiceItem {
  id          String  @id @default(uuid())
  description String
  quantity    Int     @default(1)
  unitPrice   Decimal @db.Money
  totalPrice  Decimal @db.Money

  // Relations
  invoiceId String
  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("invoice_items")
}

model Retainer {
  id          String         @id @default(uuid())
  title       String
  description String?
  totalAmount Decimal        @db.Money
  hourlyRate  Decimal?       @db.Money
  status      RetainerStatus @default(ACTIVE)
  startDate   DateTime       @default(now())
  endDate     DateTime?

  // Relations
  clientId  String
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("retainers")
}

enum ExpenseCategory {
  OFFICE_SUPPLIES
  TRAVEL
  MEALS
  SOFTWARE
  EQUIPMENT
  MARKETING
  UTILITIES
  RENT
  OTHER
}

enum NoteType {
  GENERAL
  TODO
  DELIVERABLE
  MEETING_NOTES
  CLIENT_COMMUNICATION
  PROJECT_NOTES
  PERSONAL
}

enum NotePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum NoteStatus {
  ACTIVE
  COMPLETED
  ARCHIVED
  CANCELLED
}

model Expense {
  id          String          @id @default(uuid())
  title       String
  description String?
  amount      Decimal         @db.Money
  category    ExpenseCategory @default(OTHER)
  date        DateTime        @default(now())
  receiptUrl  String?
  clerkId     String

  // Relations
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
  clientId  String?
  client    Client?  @relation(fields: [clientId], references: [id], onDelete: SetNull)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("expenses")
}

model Note {
  id          String       @id @default(uuid())
  title       String
  content     String
  type        NoteType     @default(GENERAL)
  priority    NotePriority @default(MEDIUM)
  status      NoteStatus   @default(ACTIVE)
  tags        String[]     @default([])
  dueDate     DateTime?
  completedAt DateTime?
  clerkId     String

  // Relations
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
  clientId  String?
  client    Client?  @relation(fields: [clientId], references: [id], onDelete: SetNull)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notes")
}
